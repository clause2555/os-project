// idt.cpp
#include <stdio.h>
#include "kernel/idt.h"
#include <string.h>

// Array of 256 IDT entries
IDTEntry idt_arr[256];

// IDT pointer
IDTPointer idt_ptr;

// Array of interrupt handler function pointers
void (*interrupt_handlers[256])();
void (*interrupt_handlers_with_error_code[256])(uint32_t);

// Forward declarations for assembly stubs
extern "C" void interrupt_stub();

// Inline Assembly to load the idt_ptr into %eax for interrupt.S
extern "C" void idt_load(IDTPointer* idt_ptr) {
        asm volatile ("lidt (%0)" : : "r"(&idt_ptr));
}

// handler declaration
extern "C" void isr0_handler();
extern "C" void irq0_handler();
extern "C" void isr1_handler();
extern "C" void isr14_stub();

// Initialize the IDT
extern "C" void init_idt() {

    
    // Clear the IDT
    memset(&idt_arr, 0, sizeof(IDTEntry) * 256);
    memset(&interrupt_handlers, 0, sizeof(void*) * 256);

    // Set up each IDT entry to point to the interrupt_stub
    for (int i = 0; i < 256; i++) {
        // Assuming interrupt_stub is a generic handler for all interrupts
        uint32_t handler_address = (uint32_t)&interrupt_stub;
        idt_arr[i].base_low    = handler_address & 0xFFFF;
        idt_arr[i].base_high   = (handler_address >> 16) & 0xFFFF;
        idt_arr[i].selector     = 0x08; // Kernel code segment selector (from GDT)
        idt_arr[i].zero         = 0;
        idt_arr[i].flags        = 0x8E; // Present, Ring 0, 32-bit interrupt gate
    }

    // Set the IDT pointer
    idt_ptr.limit = sizeof(IDTEntry) * 256 - 1;
    idt_ptr.base  = (uint32_t)&idt_arr;

    // Load the IDT
    idt_load(&idt_ptr);

    // register interupt handlers

    register_interrupt_handler(0, isr0_handler); // divide by zero
						 //
    register_interrupt_handler(1, isr1_handler);

    register_interrupt_handler(14, isr14_stub);
						 
    register_interrupt_handler(32, irq0_handler);

}

// Register an interrupt handler
extern "C" void register_interrupt_handler(uint8_t interrupt, void (*handler)()) {
    interrupt_handlers[interrupt] = handler;
}

extern "C" void register_interrupt_handler_with_error_code(uint8_t interrupt, void (*handler)(uint32_t)) {
	interrupt_handlers_with_error_code[interrupt] = handler;
}


